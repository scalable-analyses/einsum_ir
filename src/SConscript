Import('g_env')

# special defines for the binary contraction factory
if 'CPPDEFINES' in g_env:
  l_bin_cont_defines = g_env['CPPDEFINES'].copy()
else:
  l_bin_cont_defines = []

if( g_env['libxsmm'] != False ):
  l_bin_cont_defines.append( 'PP_EINSUM_IR_HAS_LIBXSMM' )
if( g_env['blas'] != False ):
  l_bin_cont_defines.append( 'PP_EINSUM_IR_HAS_BLAS' )
if( g_env['tblis'] != False ):
  l_bin_cont_defines.append( 'PP_EINSUM_IR_HAS_TBLIS' )

l_bin_cont_factory = g_env.Object( 'backend/BinaryContractionFactory.cpp',
                                   CPPDEFINES = l_bin_cont_defines )
g_env.sources.append( l_bin_cont_factory )

# special defines for blas binary contraction backend
if g_env['blas'] != False:
  if 'CPPDEFINES' in g_env:
      l_bin_cont_blas_defines = g_env['CPPDEFINES'].copy()
  else:
      l_bin_cont_blas_defines = []
  if( g_env['blas_has_imatcopy'] != False ):
    l_bin_cont_blas_defines.append( 'PP_EINSUM_IR_HAS_BLAS_IMATCOPY' )
  if( g_env['blas'] == 'nvpl' ):
    l_bin_cont_blas_defines.append( 'PP_EINSUM_IR_HAS_BLAS_NVPL' )

  l_bin_cont_blas_sources = [ 'backend/BinaryContractionBlas.cpp' ]

  for l_source in l_bin_cont_blas_sources:
    g_env.sources.append( g_env.Object( l_source,
                                        CPPDEFINES = l_bin_cont_blas_defines ) )

# default files
l_sources = [ 'backend/Tensor.cpp',
              'backend/IterationSpaces.cpp',
              'backend/Unary.cpp',
              'backend/UnaryScalar.cpp',
              'backend/BinaryContraction.cpp',
              'backend/BinaryContractionScalar.cpp',
              'backend/BinaryPrimitives.cpp',
              'backend/MemoryManager.cpp',
              'backend/EinsumNode.cpp',
              'frontend/EinsumExpression.cpp',
              'frontend/EinsumExpressionAscii.cpp',
              'frontend/EinsumTree.cpp',
              'frontend/EinsumTreeAscii.cpp' ]

if g_env['libxsmm'] != False:
  l_sources += [ 'backend/UnaryTpp.cpp',
                 'backend/BinaryContractionTpp.cpp' ]

if g_env['tblis'] != False:
  l_sources += [ 'backend/BinaryContractionTblis.cpp' ]

l_tests = [ 'tests.cpp',
            'backend/IterationSpaces.test.cpp',
            'backend/Unary.test.cpp',
            'backend/BinaryContraction.test.cpp',
            'backend/BinaryPrimitives.test.cpp',
            'frontend/EinsumExpression.test.cpp',
            'frontend/EinsumExpressionAscii.test.cpp' ]

if g_env['libtorch'] != False:
  l_tests += [ 'backend/UnaryScalar.test.torch.cpp',
               'backend/BinaryContractionScalar.test.torch.cpp',
               'backend/EinsumNode.test.torch.cpp',
               'frontend/EinsumExpression.test.torch.cpp',
               'frontend/EinsumTree.test.torch.cpp' ]

if g_env['libxsmm'] != False and g_env['libtorch'] != False:
  l_tests += [ 'backend/UnaryTpp.test.torch.cpp',
               'backend/BinaryContractionTpp.test.torch.cpp' ]

if g_env['blas'] != False and g_env['libtorch'] != False:
  l_tests += [ 'backend/BinaryContractionBlas.test.torch.cpp' ]

if g_env['tblis'] != False and g_env['libtorch'] != False:
  l_tests += [ 'backend/BinaryContractionTblis.test.torch.cpp' ]

for l_source in l_sources:
  g_env.sources.append( g_env.Object( l_source ) )

for l_test in l_tests:
  g_env.tests.append( g_env.Object( l_test ) )

if g_env['libxsmm'] != False and g_env['libtorch'] != False:
  g_env.exe['bench_unary']      = g_env.Object( 'bench_unary.cpp' )
  g_env.exe['bench_binary']     = g_env.Object( 'bench_binary.cpp' )
  g_env.exe['bench_expression'] = g_env.Object( 'bench_expression.cpp' )
  g_env.exe['bench_mlp']        = g_env.Object( 'bench_mlp.cpp' )
  g_env.exe['bench_tree']       = g_env.Object( 'bench_tree.cpp' )

Export('g_env')
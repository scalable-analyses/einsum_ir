name: Unit Tests (macOS)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: 0 0 * * *

jobs:
  tests:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Homebrew bundles
        run: |
          PKG_DIR=.github/workflows/brew-packages
          for group in development-tools; do
            grep -v '^\s*#' "$PKG_DIR/${group}.txt" | xargs brew install
          done

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install PyTorch
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio
          echo LIBTORCH_PATH=$(python -c "import torch as _; print(_.__path__[0])") >> $GITHUB_ENV

      - name: Install LIBXSMM
        run: |
          git clone https://github.com/libxsmm/libxsmm.git
          cd libxsmm
          make BLAS=0 -j
          cd ..
          echo LIBXSMM_PATH=$(pwd)/libxsmm >> $GITHUB_ENV

      - name: Install einsum_ir
        run: |
          wget https://github.com/catchorg/Catch2/releases/download/v2.13.10/catch.hpp
          echo "using libxsmm path: ${LIBXSMM_PATH}"
          echo "using libtorch path: ${LIBTORCH_PATH}"
          scons mode=debug+san libtorch=${LIBTORCH_PATH} libxsmm=${LIBXSMM_PATH} blas=yes parallel=none || { cat config.log || true; exit 1; }

      - name: Run unit tests
        env:
          ASAN_OPTIONS:  "abort_on_error=1"
          UBSAN_OPTIONS: "halt_on_error=1:print_stacktrace=1"
          LSAN_OPTIONS:  "exitcode=1"
        run: |
          ./build/tests

  bcont_lib_manual:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install LIBXSMM
        run: |
          git clone https://github.com/libxsmm/libxsmm.git
          cd libxsmm
          make BLAS=0 -j
          cd ..
          echo LIBXSMM_PATH=$(pwd)/libxsmm >> $GITHUB_ENV

      - name: Install Binary Contraction Library
        run: |
          mkdir build
          cd build
          cmake ../src/binary -DLIBXSMM_ROOT=${LIBXSMM_PATH} -DEINSUM_IR_AUTO_INSTALL_LIBXSMM=OFF
          make -j
          cd ..
          cmake --install build --prefix $(pwd)/install

  bcont_lib_auto:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Binary Contraction Library
        run: |
          mkdir build
          cd build
          cmake ../src/binary
          make -j
          cd ..
          cmake --install build --prefix $(pwd)/install